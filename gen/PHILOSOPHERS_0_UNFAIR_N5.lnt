module PHILOSOPHERS_0_UNFAIR_N5 is
    
        function BOUND:Nat is return 0 end function
        function DISABLELSTIG:Nat is return 1 end function
        function MAXCOMPONENTS:Nat is return 5 end function
        function MAXKEYE:Nat is return 5 end function
        function MAXKEYI:Nat is return 1 end function
        function MAXKEYL:Nat is return 1 end function
        function MAXPC:Nat is return 1 end function
        function MAXTUPLE:Nat is return 1 end function
    
    function undef_value:Int is return -128 end function

    type ID is X:Nat where X < MAXCOMPONENTS with "==", "!=" end type
    type PC is array [ 0 .. 0 ] of Nat end type
    type Iface is array [ 0 .. 0 ] of Int with "get", "set" end type

    channel IdChannel is (ID) end channel
    channel Boolch is (Bool) end channel


    type Env is array [ 0 .. 4 ] of Int with "get", "set" end type

    process env [action: Any] (in out E:Env, key:Int, val:Int) is 
        E[IntToNat(key)] := val;
        action("E", key, val)
    end process

    type Agent is agent(id: ID, I: Iface, init:Bool, pc:PC) with "get", "set" end type
    type Agents is array [ 0 .. 4 ] of Agent with "get", "set" end type

    type Sys is sys(agents: Agents,env: Env) with "get", "set" end type


    function emptyAgent: Agent is
        return Agent(ID(0), Iface(0), false, PC(0))
    end function

    process attr [action: Any] (in out a:Agent, key:Nat, val:Int) is 
        var Inew: Iface in 
            Inew := a.I;
            Inew[key] := val;
            a := a.{I => Inew}
        end var;
        action("I", a.id, key, val)
    end process


process INITAGENT (in out a:Agent) is
    var I:Iface, x: Int, p:PC in
        I := a.I;
        
        p := a.pc;

        if (Nat(a.id) >= 0) and (Nat(a.id) < 5) then

        p[0] := 9;


        x := any Int where (((x) == ((0 of Int))));
        I[0] := x        
        end if;

        a := a.{I => I, init => true, pc => p}
    end var 
end process

process INITENV(in out e: Env) is
    var x: Int in 
        
        x := any Int where (((x) == ((0 of Int))));
        e[0] := x;
        x := any Int where (((x) == ((0 of Int))));
        e[1] := x;
        x := any Int where (((x) == ((0 of Int))));
        e[2] := x;
        x := any Int where (((x) == ((0 of Int))));
        e[3] := x;
        x := any Int where (((x) == ((0 of Int))));
        e[4] := x    end var
end process

process action_0_2 [action: Any] (in out agent: Agent, in out E: Env) is
    --(status, 0) <- 0

    attr[action](!?agent, 0, (0 of Int));


    var p: PC in
        p := agent.pc;
        
        p[0] := 9;
        agent := agent.{pc => p}
    end var
end process

process action_0_3 [action: Any] (in out agent: Agent, in out E: Env) is
    --(fork, 0)[id] <-- 0

    env[action](!?E, 0 + (NatToInt(Nat(agent.id)) of Int), (0 of Int));

    var p: PC in
        p := agent.pc;
        
        p[0] := 2;
        agent := agent.{pc => p}
    end var
end process

process action_0_4 [action: Any] (in out agent: Agent, in out E: Env) is
    --(status, 0) <- 3

    attr[action](!?agent, 0, (3 of Int));


    var p: PC in
        p := agent.pc;
        
        p[0] := 3;
        agent := agent.{pc => p}
    end var
end process

process action_0_5 [action: Any] (in out agent: Agent, in out E: Env) is
    --(fork, 0)[id + 1 % 5] <-- 0

    env[action](!?E, 0 + (((NatToInt(Nat(agent.id)) of Int)) + ((1 of Int))) mod ((5 of Int)), (0 of Int));

    var p: PC in
        p := agent.pc;
        
        p[0] := 4;
        agent := agent.{pc => p}
    end var
end process

process action_0_6 [action: Any] (in out agent: Agent, in out E: Env) is
    --(status, 0) <- 2

    attr[action](!?agent, 0, (2 of Int));


    var p: PC in
        p := agent.pc;
        
        p[0] := 5;
        agent := agent.{pc => p}
    end var
end process

process action_0_7 [action: Any] (in out agent: Agent, in out E: Env) is
    --((fork, 0)[id + 1 % 5]) == (0)->(fork, 0)[id + 1 % 5] <-- 1

    env[action](!?E, 0 + (((NatToInt(Nat(agent.id)) of Int)) + ((1 of Int))) mod ((5 of Int)), (1 of Int));

    var p: PC in
        p := agent.pc;
        
        p[0] := 6;
        agent := agent.{pc => p}
    end var
end process

process action_0_8 [action: Any] (in out agent: Agent, in out E: Env) is
    --(status, 0) <- 1

    attr[action](!?agent, 0, (1 of Int));


    var p: PC in
        p := agent.pc;
        
        p[0] := 7;
        agent := agent.{pc => p}
    end var
end process

process action_0_9 [action: Any] (in out agent: Agent, in out E: Env) is
    --((fork, 0)[id]) == (0)->(fork, 0)[id] <-- 1

    env[action](!?E, 0 + (NatToInt(Nat(agent.id)) of Int), (1 of Int));

    var p: PC in
        p := agent.pc;
        
        p[0] := 8;
        agent := agent.{pc => p}
    end var
end process

process lastAgent [last: IdChannel] is
    var tid: ID in
        tid :=  0;
        loop
            last(tid);
            last(?tid)
        end loop
    end var
end process

process step [last: IdChannel, mon, action: Any] (in out sys: Sys) is
    var a:Agent, tid:ID, agents:Agents, firstAgent: Int, E: Env in
        agents := sys.agents;

        last(?tid);
        action(tid);
        a := agents[Nat(tid)];
        if (a.init == false) then INITAGENT(!?a); action(a) end if;

        E := sys.env;
        if canProceed(a, sys.env) then
            firstAgent := NatToInt(Nat(tid));
            select
                only if (a.pc[0] == 2) then action_0_2[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 3) then action_0_3[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 4) then action_0_4[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 5) then action_0_5[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 6) then action_0_6[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 7) and ((E[IntToNat(0 + (((firstAgent of Int)) + ((1 of Int))) mod ((5 of Int)))]) == ((0 of Int))) then action_0_7[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 8) then action_0_8[action](!?a, !?e) end if
            []
                only if (a.pc[0] == 9) and ((E[IntToNat(0 + (firstAgent of Int))]) == ((0 of Int))) then action_0_9[action](!?a, !?e) end if
            
            end select
        end if;

        agents[Nat(tid)] := a;
        sys := sys.{ agents => agents, env => e};
        --- scheduler ---
        
        tid := any ID;
        
        last(tid) -- store tid for later retrieval
        --- end scheduler ---

    end var
end process

process monitor [mon: any] (agents: Agents) is
    if(agents[0].init) and (agents[1].init) and (agents[2].init) and (agents[3].init) and (agents[4].init) then 
        -- P1
        if not((((agents[0].I[IntToNat(0)]) != ((1 of Int)))) or (((agents[1].I[IntToNat(0)]) != ((1 of Int)))) or (((agents[2].I[IntToNat(0)]) != ((1 of Int)))) or (((agents[3].I[IntToNat(0)]) != ((1 of Int)))) or (((agents[4].I[IntToNat(0)]) != ((1 of Int))))) then mon(false); stop end if
    end if
end process

function canProceed(a: Agent, E: Env): Bool is
    var firstAgent: Int in
    firstAgent := NatToInt(Nat(a.id));
    return 
        
        (
                ((a.pc[0] == 2))
            or
                ((a.pc[0] == 3))
            or
                ((a.pc[0] == 4))
            or
                ((a.pc[0] == 5))
            or
                ((a.pc[0] == 6))
            or
                ((a.pc[0] == 7) and ((E[IntToNat(0 + (((firstAgent of Int)) + ((1 of Int))) mod ((5 of Int)))]) == ((0 of Int))))
            or
                ((a.pc[0] == 8))
            or
                ((a.pc[0] == 9) and ((E[IntToNat(0 + (firstAgent of Int))]) == ((0 of Int))))
            
        )
    end var
end function

function existsEnabledAgent (sys: Sys): Bool is
    var n: Nat in
        for n := 0 while (n < MAXCOMPONENTS) by n := n + 1 loop
            if not(sys.agents[n].init) or canProceed(sys.agents[n], sys.env) then
                return true
            end if
        end loop;
        return false
    end var
end function



process MAIN [monitor, action: Any] is
    var sys: Sys, agents: Agents, e:Env in
        agents := Agents(emptyAgent);
        
        var tid: Nat, a: Agent in
            for tid := 0 while tid < MAXCOMPONENTS by tid := tid + 1 loop
                a := agents[tid].{id => ID(tid)};
                INITAGENT(!?a);
                agents[tid] := a; action(a)
            end loop;
            e := Env(0);
            INITENV(!?e);
            action(e);
            sys := Sys(agents, e)
        end var;

        hide last:IdChannel in
            par last in
                lastAgent [last]
                ||
                loop
                    monitor[monitor](sys.agents);
                                        if not(existsEnabledAgent(sys)) then
                        monitor("deadlock"); stop
                    end if;
                    step[last, monitor, action](!?sys)
                end loop
            end par
        end hide
    end var
end process

end module

